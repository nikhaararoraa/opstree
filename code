# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class LinkedList:
    def __init__(self):
        self.head=None
        
    def append(self,data):
        new_node=Node(data)
        if not self.head:
            self.head=new_node
            return
        last_node=self.head
        while last_node.next:
            last_node=last_node.next
        last_node.next=new_node
    def prepend(self,data):
        new_node=Node(data)
        new_node.next=self.head
        self.head=new_node
    def delete_with_value(self,data):
        if not self.head:
            return
        if self.head.data==data:
            self.head=self.head.next
            return 
        current_node=self.head
        while current_node.next:
            if current_node.next.data==data :
                current_node.next=current_node.next.next
                current_node=current_node.next
    def print_list(self):
        current_node=self.head
        while current_node:
            print(current_node.data,end =" -> "   if current_node.next else "\n" ) 
            current_node=current_node.next
    def input_numbers(self):
        numbers=input("Enter the numbers").split()
        for num in numbers:
            self.append(int(num))

    def traverse(self):
        current_node=self.head
        while current_node:
            print(current.node.data)
            current_node=current_node.next
    def search(self,key):
        current_node=self.head
        while current_node:
            if current_node.data==key:
                return True
            current_node=current_node.next
        return False
    def sort(self,reverse=False):
        if not self.head or not self.head.next:
            return 
        sorted =False
        while not sorted:
            sorted =True
            current=self.head
            while current.next:
                next_node=current.next
                if (not reverse and current.data>next_node.data) or (reverse and current.data<next_node.data):
                    current.data,next_node.data=next_node.data,current.data
                    sorted=False
                current=current.next
                
        
            
if __name__=="__main__":
    llist=LinkedList()
    llist.input_numbers()
    
    print("Original list:")
    llist.print_list()
    

    key =int(input("enter a number to be searched:"))
    if llist.search(key):
        print(f"{key} is in the list")
    else:
        print(f"{key} is not in the list")
    llist.sort(reverse=False)
    print("sorted list (ascending):")
    llist.print_list()
    llist.sort(reverse=True)
    print("sorted list (descending):")
    llist.print_list()
  
